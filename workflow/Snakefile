import os
import os.path as osp


report: "report/workflow.rst"


configfile: "config/config.yaml"


source = config["source"][:-1] if config["source"][-1] == "/" else config["source"]
target = config["target"][:-1] if config["target"][-1] == "/" else config["target"]
targets = [x.split(".")[0] for x in os.listdir(source + "/structures") if x.endswith(".pdb")]

if config["structures"] == "whole":
    rinerator_input = source + "/structures/{protein}.pdb"
    rinerator_output = target + "/rinerator_whole/{protein}/{protein}_h.sif"
    structures = "resources/structures/{protein}.pdb"
    script_output = ""
elif config["structures"] == "template":
    rinerator_input = target + "/parsed_structures_template/{protein}.pdb"
    rinerator_output = target + "/rinerator_template/{protein}/{protein}_h.sif"
    script_output = target + "/pymol_template/{protein}.pml"
elif config["structures"] == "bsite":
    rinerator_input = target + "/parsed_structures_bsite/{protein}.pdb"
    rinerator_output = target + "/rinerator_bsite/{protein}/{protein}_h.sif"
    script_output = target + "/pymol_bsite/{protein}.pml"
else:
    structures = "results/parsed_structures_{structures}/{{protein}}.pdb".format(structures=config["structures"])
    script_output = "results/pymol_{structures}/{{protein}}.pml".format(structures=config["structures"])


rinerator_output = "results/rinerator_{structures}/{{protein}}/{{protein}}_h.sif".format(
    structures=config["structures"]
)
rinerator_protein_output = "results/rinerator_based/protein_data_{structures}_{node_feats}_{edge_feats}.pkl".format(
    structures=config["structures"],
    node_feats=config["prepare_proteins"]["node_feats"],
    edge_feats=config["prepare_proteins"]["edge_feats"],
)

distance_protein_output = "results/distance_based/protein_data_{structures}_{node_feats}_{edge_feats}.pkl".format(
protein_output = target + "/prepare_proteins/protein_data_{structures}_{node_feats}_{edge_feats}.pkl".format(
    structures=config["structures"],
    node_feats=config["prepare_proteins"]["node_feats"],
    edge_feats=config["prepare_proteins"]["edge_feats"],
)

drug_output = "results/prepare_drugs/drug_data_{node_feats}_{edge_feats}.pkl".format(**config["prepare_drugs"])
if config["graph"] == "distance":
    protein_output = distance_protein_output
else:
    protein_output = rinerator_protein_output

split_data = target + "/split_data/{split}_{filtering}_{sampling}_{task}_split.csv".format(
    split=config["split"]["method"],
    filtering=config["parse_dataset"]["filtering"],
    sampling=config["parse_dataset"]["sampling"],
    task=config["parse_dataset"]["task"],
)

transformer_output = target + "/prepare_transformer/{node_feats}_transformer.pkl".format(
    node_feats=config["prepare_proteins"]["node_feats"]
)

final_output = "results/prepare_all/{split}_{filtering}_{sampling}_{task}_{structures}_{graph}_{prot_node_feats}_{prot_edge_feats}_{drug_node_feats}_{drug_edge_feats}.pkl".format(
    split=config["split"]["method"],
    filtering=config["parse_dataset"]["filtering"],
    sampling=config["parse_dataset"]["sampling"],
    task=config["parse_dataset"]["task"],
    structures=config["structures"],
    graph=config["graph"],
    prot_node_feats=config["prepare_proteins"]["node_feats"],
    prot_edge_feats=config["prepare_proteins"]["edge_feats"],
    drug_node_feats=config["prepare_drugs"]["node_feats"],
    drug_edge_feats=config["prepare_drugs"]["edge_feats"],
)

plot_output = final_output.split("/")[-1].split(".")[0]
plot_output = target + "/plot_summary/{out}.html".format(out=plot_output)


output = [final_output, plot_output]

### CHECK IF FILES ARE PRESENT ###

if osp.isdir(source + "/templates"):
    templates = expand(source + "/templates/{template}", template=os.listdir(source + "/templates"))
else:
    if not config["only_proteins"] and config["structures"] not in ["whole", "plddt"]:
        raise ValueError("No templates available")
    templates = []

if osp.isfile(source + "/gnomad.csv"):
    gnomad = source + "/gnomad.csv"
    output.append(transformer_output)
else:
    gnomad = []

if osp.isdir(source + "/drugs"):
    drugs = {x: source + "/drugs/{x}.tsv".format(x=x) for x in ["inter", "lig"]}
else:
    if not config["only_proteins"]:
        raise ValueError("No drug interaction data available, can't calculate final data!")
    drugs = {x: [] for x in ["inter", "lig"]}

if config["only_proteins"]:  # Only calculate the data for the proteins
    output = [protein_output]


rule all:
    input:
        output,


rule create_pymol_scripts:
    input:
        expand("{resources}/structures/{protein}.pdb", resources=source, protein=targets),
    output:
        scripts=expand("{results}/pymol_bsite/{protein}.pml", results=target, protein=targets),
    log:
        expand("{results}/logs/pymol_bsite.log", results=target),
    params:
        radius=config["bsite"]["radius"],
    message:
        "Creating bsite PyMOL scripts for all protein, logs are in {log}"
    script:
        "scripts/create_pymol_scripts.py"


rule run_pymol:
    input:
        script=script_output,
        struct=source + "/structures/{protein}.pdb",
    output:
        structures=structures,
    log:
        target + "/logs/run_pymol/{protein}.log",
    conda:
        "envs/pymol.yml"
    message:
        "Running PyMOL script for {wildcards.protein}, logs are in {log}"
    shell:
        """
        pymol -k -y -c {input.script} > {log} 2>&1
        """


rule save_structure_info:
    input:
        structs=expand(structures, protein=targets),
    output:
        tsv="results/structure_info/{type}_info.tsv".format(type=config["structures"]),
    script:
        "scripts/save_structure_info.py"


rule rinerator:
    input:
        pdb=structures,
    output:
        sif=rinerator_output,
    log:
        target + "/logs/rinerator/{protein}.log",
    params:
        dir="{results}/rinerator_{structures}".format(results=target, structures=config["structures"]),
    message:
        "Running RINerator for {wildcards.protein}, logs are in {log}"
    shadow:
        "shallow"
    shell:
        """rinerator {input.pdb} {params.dir}/{wildcards.protein} > {log} 2>&1"""


rule prepare_proteins:
    input:
        rins=expand(rinerator_output, protein=targets),
    output:
        protein_pickle=rinerator_protein_output,
    message:
        """
        Creating protein data.
        Structures config is {config[structures]}
        Node feature type is {config[prepare_proteins][node_feats]}.
        Edge feature type is {config[prepare_proteins][edge_feats]}.
        """
    script:
        "scripts/prepare_proteins.py"


rule distance_based:
    input:
        pdbs=expand(structures, protein=targets),
    output:
        pickle=distance_protein_output,
    log:
        "results/logs/distance_based.log",
    params:
        threshold=config["distance"]["threshold"],
    message:
        "Running distance based network calculation, logs are in {log}"
    script:
        "scripts/distance_based.py"


rule parse_dataset:
    input:
        inter=drugs["inter"],
    output:
        lig="{results}/parse_dataset/{filtering}_lig.csv".format(results=target, filtering=config["parse_dataset"]["filtering"]),
        inter="{results}/parse_dataset/{filtering}_inter.csv".format(results=target, filtering=config["parse_dataset"]["filtering"]),
    message:
        """Parsing the dataset

        Filtering is {config[parse_dataset][filtering]}
        Sampling is {config[parse_dataset][sampling]}
        Task is {config[parse_dataset][task]}
        Log is {config[parse_dataset][log]}
        Threshold is {config[parse_dataset][threshold]}
        """
    script:
        "scripts/parse_dataset.py"


rule split_data:
    input:
        inter=rules.parse_dataset.output.inter,
    output:
        split_data="{results}/split_data/{split}_{filtering}_{sampling}_split.csv".format(
            results=target,
            split=config["split"]["method"],
            filtering=config["parse_dataset"]["filtering"],
            sampling=config["parse_dataset"]["sampling"],
        ),
    message:
        "Splitting the dataset with {config[split][method]} method"
    script:
        "scripts/split_data.py"


rule prepare_drugs:
    input:
        lig=drugs["lig"],
    output:
        drug_pickle=drug_output,
    message:
        "Encoding the drugs"
    script:
        "scripts/prepare_drugs.py"


rule prepare_all:
    input:
        drugs=rules.prepare_drugs.output.drug_pickle,
        proteins=protein_output,
        inter=rules.split_data.output.split_data,
    output:
        combined_pickle=final_output,
    message:
        """
        Combining the final dataset.
        """
    script:
        "scripts/prepare_all.py"


rule prepare_transformer:
    input:
        gnomad=gnomad,
        prots=rules.prepare_proteins.output.protein_pickle,
    output:
        transformer_pickle=transformer_output,
    script:
        "scripts/prepare_transformer.py"


rule plot_summary:
    input:
        pickle=rules.prepare_all.output.combined_pickle,
        struct_info=rules.save_structure_info.output.tsv,
    output:
        html=plot_output,
    script:
        "scripts/plot_summary.py"
